#!/usr/bin/env python

import argparse
import subprocess
import json
from datetime import datetime
from pprint import pprint

try:
    import urllib.request as urlrequest
    from urllib.error import HTTPError
except ImportError:
    import urllib2 as urlrequest
    from urllib2 import HTTPError
import collections

# compatibility with python 2.6+
try:
    from subprocess import STDOUT, check_output, CalledProcessError
except ImportError:
    # python 2.6 doesn't include check_output
    # backported from 2.7
    import subprocess

    def check_output(*popenargs, **kwargs):
        if 'stdout' in kwargs:
            raise ValueError('stdout argument not allowed, '
                             'it will be overridden.')
        process = subprocess.Popen(stdout=subprocess.PIPE,
                                   *popenargs, **kwargs)
        output, _ = process.communicate()
        retcode = process.poll()
        if retcode:
            cmd = kwargs.get("args")
            if cmd is None:
                cmd = popenargs[0]
            error = subprocess.CalledProcessError(retcode, cmd)
            error.output = output
            raise error
        return output
    subprocess.check_output = check_output

OperationResult = collections.namedtuple(
  'OperationResult', ['function', 'region', 'failed', 'error'])

_GRAPHQL_API_URL = 'https://api.newrelic.com/graphql'
_GRAPHQL_EU_API_URL = 'https://api.eu.newrelic.com/graphql'
_DEBUG = False

_DOCS_CONFIGURE_AWS_CLI_LINK = 'https://docs.aws.amazon.com/cli/latest/userguide/cli-chap-configure.html#cli-quick-configuration'
_DOCS_CONNECT_ACCOUNT_LINK = 'https://docs.newrelic.com/docs/serverless-function-monitoring/aws-lambda-monitoring/get-started/enable-new-relic-monitoring-aws-lambda#connect-aws'
_DOCS_INSTRUMENT_LAMBDA_LINK = 'https://docs.newrelic.com/docs/serverless-function-monitoring/aws-lambda-monitoring/get-started/enable-new-relic-monitoring-aws-lambda#instrument-lambda'
_DOCS_STREAM_LOGS_LINK = 'https://docs.newrelic.com/docs/serverless-function-monitoring/aws-lambda-monitoring/get-started/enable-new-relic-monitoring-aws-lambda#stream-logs'
_DOCS_NR_API_KEY_LINK = 'https://docs.newrelic.com/docs/apis/get-started/intro-apis/types-new-relic-api-keys#user-api-key'

class NewRelicGraphQLClient:

    def __init__(self, nr_account_id, api_key, endpoint):
        self.api_key = api_key
        self.nr_account_id = int(nr_account_id)
        self.debug = False
        self.url = endpoint

    def _extract_errors(self, errors):
        """
        extract error messages from the errors lists. we need to parse 2 types
        of errors:
           - query parsing errors: these don't reach the downstream service
           - downstream errors: these come from the 'real' service downstream
        """
        error_messages = []
        for error in errors:
            downstream_error = error.get('downstreamResponse', '')
            if downstream_error:
                for e in downstream_error:
                    error_messages.append(e.get('message', ''))
            else:
                error_messages.append(error.get('message', ''))

        return error_messages

    def _raise_if_failed(self, response, operation=None):
        errors = response['errors'] if 'errors' in response else None
        if errors is None and operation is not None:
            errors = response['data'][operation]['errors']

        if errors:
            error_messages = self._extract_errors(errors)
            error_message = '\n'.join(error_messages)
            raise Exception(error_message)

    def _execute_query(self, query, params=None):
        post_data = json.dumps({
          'query': query,
          'variables': params
        }).encode('utf-8')
        headers = {
          'Content-Type': 'application/json',
          'api-key': self.api_key,
          'Content-Length': str(len(post_data))}

        req = urlrequest.Request(self.url, post_data, headers)
        debug_print('Executing query: query={0}, variables={1}'.format(query, params))
        res = urlrequest.urlopen(req)
        response = res.read().decode('utf-8')
        debug_print('Query response: {0}'.format(response))
        return json.loads(response)

    def _get_linked_accounts(self):
        """
        return a list of linked accounts for the current New Relic account
        """
        query = '''
          query($accountId: Int!) {
            actor {
              account(id: $accountId) {
                cloud {
                  linkedAccounts {
                    id
                    name
                    createdAt
                    updatedAt
                    authLabel
                    externalId
                  }
                }
              }
            }
          }
        '''
        params = {'accountId': self.nr_account_id}
        response = self._execute_query(query=query, params=params)
        self._raise_if_failed(response)
        account = response['data']['actor']['account']
        return account['cloud']['linkedAccounts']

    def get_license_key(self):
        """
        Fetch the license key for this NR Account. Validates that the nr-api-key is correct, that this API key
        can access the account, and attempts to provide helpful messages if anything goes wrong.
        """
        query = '''
            query($accountId: Int!) {
              requestContext {
                apiKey
              }
              actor {
                account(id: $accountId) {
                  licenseKey
                  id
                  name
                }
              }
            }
            '''
        params = {'accountId': self.nr_account_id}
        try:
            response = self._execute_query(query=query, params=params)
        except HTTPError as e:
            if e.code == 401:
                print("\nUnauthorized error when querying New Relic. Make sure that your New Relic API Key is correct.\nFind your API Key: %s" % _DOCS_NR_API_KEY_LINK)
                if not self.api_key.startswith("NRAK-"):
                    print("Valid New Relic API Keys generally start with \"NRAK-\". You supplied %s" % self.api_key)
            raise e

        if "errors" in response:
            if len([e for e in response["errors"] if e["message"] == "Access denied."]) > 0:
                print("\nCouldn't find New Relic Account ID %d using this API key, but the API Key appears valid. Is that the right account ID?" % self.nr_account_id)

        self._raise_if_failed(response)
        account = response['data']['actor']['account']

        return account['licenseKey']

    def get_linked_account_by_name(self, account_name):
        """
        return a specific linked account of the current New Relic account
        """
        accounts = self._get_linked_accounts()
        # find account with name == account_name, or None
        return next((account for account in accounts
                    if account['name'] == account_name), None)

    def create_linked_account(self, role_arn, account_name):
        """
        create a linked account (cloud integrations account)
        in your New Relic account
        """
        query = '''
          mutation ($accountId: Int!, $accounts: CloudLinkCloudAccountsInput!){
            cloudLinkAccount(accountId: $accountId, accounts: $accounts) {
              linkedAccounts {
                id
                name
              }
              errors {
                  message
              }
            }
          }
        '''
        accounts = {'aws': {'arn': role_arn, 'name': account_name}}
        params = {'accountId': self.nr_account_id, 'accounts': accounts}
        response = self._execute_query(query=query, params=params)
        self._raise_if_failed(response, 'cloudLinkAccount')
        # should be only one even though we ask for many
        return response['data']['cloudLinkAccount']['linkedAccounts'][0]

    def get_integration_by_service_slug(self, linked_account_id,
                                        service_slug):
        """
        return the integration that is associated with the specified service
        name.
        """
        query = '''
          query($accountId: Int!, $linkedAccountId: Int!) {
            actor {
              account(id: $accountId) {
                cloud {
                  linkedAccount(id: $linkedAccountId) {
                    integrations {
                      id
                      name
                      createdAt
                      updatedAt
                      service {
                        slug
                        isEnabled
                      }
                    }
                  }
                }
              }
            }
          }
        '''
        params = {'accountId': self.nr_account_id,
                  'linkedAccountId': linked_account_id}
        response = self._execute_query(query=query, params=params)
        self._raise_if_failed(response)
        account = response['data']['actor']['account']
        integrations = account['cloud']['linkedAccount']['integrations']
        # return the integration with service.slug == service_slug, or none
        return next((integration for integration in integrations
                    if integration['service']['slug'] == service_slug), None)

    def is_integration_enabled(self, linked_account_id,
                               service_slug):
        integration = self.get_integration_by_service_slug(
            linked_account_id, service_slug)
        return (integration and integration['service']['isEnabled'])

    def enable_integration(self, linked_account_id, provider_slug,
                           service_slug):
        """
        enable monitoring of a Cloud provider service (integration)
        """
        query = '''
          mutation($accountId:Int!, $integrations: CloudIntegrationsInput!) {
            cloudConfigureIntegration(accountId: $accountId,
                                      integrations: $integrations) {
              integrations {
                id
                name
                service {
                  id
                  name
                }
              }
              errors {
                linkedAccountId
                message
              }
            }
          }
        '''
        integrations = {provider_slug: {
                         service_slug: [{'linkedAccountId': linked_account_id}]
                        }}
        params = {'accountId': self.nr_account_id,
                  'integrations': integrations}
        response = self._execute_query(query=query, params=params)
        self._raise_if_failed(response, 'cloudConfigureIntegration')
        # should be only one
        return response['data']['cloudConfigureIntegration']['integrations'][0]


def debug_print(message):
    if _DEBUG:
        with open('debug.log', 'a') as file:
            file.write(str(datetime.now()) + ' ' + message + '\n')


def execute_shell_command(command):
    # force json output. some users may have other formats by default but
    # we only support json
    command = command + ' --output json'
    debug_print('Executing shell command: {0}'.format(command))
    try:
        response = subprocess.check_output(command, shell=True, stderr=subprocess.STDOUT)
        debug_print('Shell command response: {0}'.format(response))
        return 0, response.decode('utf-8')
    except subprocess.CalledProcessError as e:
        debug_print('Shell command error: {0}'.format(e.output))
        return e.returncode, e.output.decode('utf-8')


def list_all_regions():
    '''
    Get all regions where Lambda is currently supported.
    China and GovCloud not included
    '''
    return ['ap-east-1', 'ap-northeast-1', 'ap-northeast-2', 'ap-south-1',
            'ap-southeast-1', 'ap-southeast-2', 'ca-central-1', 'eu-central-1',
            'eu-north-1', 'eu-west-1', 'eu-west-2', 'eu-west-3', 'sa-east-1',
            'us-east-1', 'us-east-2', 'us-west-1', 'us-west-2']


def get_endpoint(nr_region):
    if nr_region == "eu":
        debug_print('Using GraphQL EU endpoint for GraphQL API')
        return _GRAPHQL_EU_API_URL
    else:
        debug_print('Using GraphQL US endpoint for GraphQL API')
        return _GRAPHQL_API_URL


def print_summary(results):
    failures = list((result for result in results if result.failed))
    sucesses = list((result for result in results if not result.failed))

    if failures:
        print('\n')
        print('Failed actions:')
        for failure in failures:
            print('  Function: {0}, Region: {1}, Error: {2}'
                  .format(failure.function, failure.region, failure.error))

    if sucesses:
        print('\n')
        print('Completed actions:')
        for success in sucesses:
            print('  Function: {0}, Region: {1}'
                  .format(success.function, success.region))


def print_check_status(results):
    print('\n')
    failures = list((result for result in results if result.failed))
    if failures:        
        print('There are lambda setup steps that were not completed:')
        for failure in failures:
            print('-> {0} \n'.format(failure.error))
    else:
        print(('All Lambda monitoring steps were completed. \n'
               'If you are not seeing Lambda monitoring data wait a few minutes and '
               'if you still do not see data open a support ticket with New Relic.'))


def get_role(role_name):
    cmd = 'aws iam get-role --role-name {0}'.format(role_name)
    exit_code, response = execute_shell_command(cmd)
    # error:most likely role does not exist
    if exit_code > 0:
        if 'NoSuchEntity' in str(response):
            return None
        else:
            raise Exception(response)
    else:
        return json.loads(response)


def get_function(function_name, region):
    cmd = ('aws --region {0} lambda get-function '
           '--function-name {1}').format(region, function_name)
    exit_code, response = execute_shell_command(cmd)
    # error:most likely function does not exist
    if exit_code > 0:
        if 'ResourceNotFoundException' in str(response):
            return None
        else:
            raise Exception(response)
    else:
        return json.loads(response)


def check_for_ingest_stack(region):
    """
    Check to see if the NewRelicLogIngestion stack exists. Sometimes, permission issues result in the stack getting
    stuck in the RollbackComplete state, which wedges the script. We'd like to at least detect this and help the
    user recover.
    :param region: AWS region to check
    :return: StackStatus of the stack if found, or None.
    """
    return get_cf_stack_status('NewRelicLogIngestion', region)


def get_cf_stack_status(stack_name, region=None):
    """
    Check to see if a stack exists. Sometimes, permission issues result in the stack getting
    stuck in the RollbackComplete state, which wedges the script. We'd like to at least detect this and help the
    user recover.
    :param region: AWS region to check
    :param stack_name: The stack to look for
    :return: StackStatus of the stack if found, or None.
    """
    region_arg = ''
    if region is not None:
        region_arg = ' --region {0}'.format(region)
    cmd = ('aws{0} cloudformation describe-stacks '
           '--stack-name {1}').format(region_arg, stack_name)
    exit_code, response = execute_shell_command(cmd)
    # error:most likely function does not exist
    if exit_code > 0:
        if 'ValidationError' in str(response):
            return None
        else:
            raise Exception(response)
    else:
        stack_desc = json.loads(response)
        return stack_desc['Stacks'][0]['StackStatus']


def get_streaming_filters(region, function_name):
    cmd = ('aws --region {0} logs describe-subscription-filters '
           '--log-group-name "/aws/lambda/{1}"').format(region, function_name)
    exit_code, response = execute_shell_command(cmd)
    if exit_code > 0:
        raise Exception(response)
    else:
        response = json.loads(response)
        return response["subscriptionFilters"]


def create_role(role_policy, nr_account_id):
    role_policy_name = "" if role_policy is None else role_policy
    cmd = ('aws cloudformation create-stack '
           '--stack-name NewRelicLambdaIntegrationRole-{0} '
           '--template-body file://./templates/nr-lambda-integration-role.yaml '
           '--parameters ParameterKey=NewRelicAccountNumber,ParameterValue={1} '
           'ParameterKey=PolicyName,ParameterValue={2} '
           '--capabilities CAPABILITY_NAMED_IAM'
           ).format(nr_account_id, nr_account_id, role_policy_name)
    exit_code, response = execute_shell_command(cmd)
    if exit_code > 0:
        raise Exception(response)
    else:
        # wait for stack to create
        cmd = ('aws cloudformation wait stack-create-complete '
               '--stack-name NewRelicLambdaIntegrationRole-{0} '
               ).format(nr_account_id)
        exit_code, response = execute_shell_command(cmd)
        if exit_code > 0:
            raise Exception(response)

def create_function(region, nr_license_key):
    cmd = ('aws --region {0} cloudformation create-stack '
           '--stack-name NewRelicLogIngestion '
           '--template-body file://./templates/newrelic-log-ingestion.yaml '
           '--parameters ParameterKey=NewRelicLicenseKey,ParameterValue={1} '
           '--capabilities CAPABILITY_NAMED_IAM CAPABILITY_AUTO_EXPAND'
           ).format(region, nr_license_key)

    exit_code, response = execute_shell_command(cmd)
    if exit_code > 0:
        raise Exception(response)
    else:
        cmd = ('aws --region {0} cloudformation wait '
               'stack-create-complete --stack-name NewRelicLogIngestion'
               ).format(region)

        exit_code, response = execute_shell_command(cmd)
        if exit_code > 0:
            raise Exception(response)
        else:
            return response


def add_function_streaming_filter(region, function_name, function_arn):
    cmd = ('aws --region {0} logs put-subscription-filter '
           '--log-group-name "/aws/lambda/{1}" '
           '--filter-name NewRelicLogStreaming '
           '--filter-pattern "NR_LAMBDA_MONITORING" '
           '--destination-arn "{2}" '
           ).format(region, function_name, function_arn)
    exit_code, response = execute_shell_command(cmd)
    if exit_code > 0:
        raise Exception(response)


def remove_function_streaming_filter(region, function_name):
    cmd = ('aws --region {0} logs delete-subscription-filter '
           '--log-group-name "/aws/lambda/{1}" '
           '--filter-name NewRelicLogStreaming '
           ).format(region, function_name)
    exit_code, response = execute_shell_command(cmd)
    if exit_code > 0:
        raise Exception(response)


def create_log_subscription(region, function_name):
    function = get_function("newrelic-log-ingestion", region)
    if function is None:
        error_msg = ('Could not find "newrelic-log-ingestion function". '
                     'Please create it first before enabling log streaming.')
        return OperationResult(function_name, region, True, error_msg)
    function_arn = function['Configuration']['FunctionArn']
    # check if any subscription filter already exists for the function to
    # avoid throwing LimitExceeded.
    streaming_filters = get_streaming_filters(region, function_name)
    if not streaming_filters:
        add_function_streaming_filter(region, function_name, function_arn)
    else:
        filter = streaming_filters[0]
        if filter['filterName'] == 'NewRelicLogStreaming' and filter['filterPattern'] == "":
            remove_function_streaming_filter(region, function_name)
            add_function_streaming_filter(region, function_name, function_arn)
        elif filter['filterName'] != 'NewRelicLogStreaming':
            print(('Function {} already has a streaming '
                  'subscription assigned. Skipping...').format(function_name))

    return OperationResult(function_name, region, False, None)


def create_integration_role(role_policy, nr_account_id):
    roleName = 'NewRelicLambdaIntegrationRole_{0}'.format(nr_account_id)
    stack_name = "NewRelicLambdaIntegrationRole-{0}".format(nr_account_id)
    role = get_role(roleName)
    if role is None:
        stack_status = get_cf_stack_status(stack_name)
        if stack_status is None:
            create_role(role_policy, nr_account_id)
            role = get_role(roleName)
            print(('Created role [{0}] with policy [{1}] in your default '
                   'AWS account. '.format(roleName, role_policy)))
        else:
            raise Exception('Cannot create CloudFormation stack {0} because it exists in state {1}'
                            .format(stack_name, stack_status))

    return role


def create_integration_account(nr_account_id, linked_account_name,
                               role, api_client):

    role_arn = role['Role']['Arn']
    account = api_client.get_linked_account_by_name(linked_account_name)
    if account is None:
        account = api_client.create_linked_account(role_arn, linked_account_name)
        print(('Cloud integrations account [{0}] was created in New Relic account [{1}] '
              'with role [{2}].').format(linked_account_name, nr_account_id, role_arn))
    else:
        print(('Cloud integrations account [{0}] already exists '
              'in New Relic account [{1}].').format(account["name"], nr_account_id))

    return account


def enable_lamba_integration(nr_account_id, linked_account_name, api_client):
    account = api_client.get_linked_account_by_name(linked_account_name)
    if account is None:
        raise Exception(('Could not find Cloud integrations account '
                         '[{0}] in New Relic account [{1}].'
                         ).format(linked_account_name, nr_account_id))

    is_lambda_enabled = api_client.is_integration_enabled(account['id'], 'lambda')
    if is_lambda_enabled:
        print(('The AWS Lambda integration is already enabled in '
               'Cloud integrations account [{0}] of New Relic account [{1}].'
               ).format(linked_account_name, nr_account_id))
    else:
        integration = api_client.enable_integration(account['id'], 'aws', 'lambda')
        print(('Integration [id={0}, name={1}] has been enabled in Cloud '
               'integrations account [{2}] of New Relic account [{3}].'
               ).format(integration["id"], integration["name"], linked_account_name, nr_account_id))


def validate_linked_account(linked_account_name, api_client):
    """
    Ensure that the aws account associated with the 'provider account',
    if it exists, is the same as the aws account of the default aws-cli
    profile configured in the local machine.
    """
    account = api_client.get_linked_account_by_name(linked_account_name)
    if account is not None:
        cmd = 'aws sts get-caller-identity'
        exit_code, response = execute_shell_command(cmd)
        if exit_code > 0:
            raise Exception(response)
        else:
            user_info = json.loads(response)
            if user_info['Account'] != account['externalId']:
                raise Exception(('The selected linked AWS account [{0}] does not match '
                                 'the AWS account of your default AWS-CLI profile [{1}].'
                                 ).format(account['externalId'], user_info['Account']))


def setup_log_ingestion(nr_license_key, regions):
    regions = regions if regions else list_all_regions()
    results = []

    for region in regions:
        function = get_function('newrelic-log-ingestion', region)
        if function is None:
            stack_status = check_for_ingest_stack(region)
            if stack_status is None:
                try:
                    print(('Setting up "newrelic-log-ingestion" function in '
                           'region: {0}').format(region))
                    create_function(region, nr_license_key)
                    results.append(
                      OperationResult('newrelic-log-ingestion', region, False, None))

                except Exception as e:
                    error_msg = ('Failed to create "newrelic-log-ingestion" '
                                 'function: {0}.').format(e)
                    results.append(
                      OperationResult('newrelic-log-ingestion', region, True, error_msg))
            else:
                print('CloudFormation Stack NewRelicLogIngestion exists (status: {0}), '
                      'but newrelic-log-ingestion Lambda function does not.\n'
                      'Please manually delete the stack and re-run the install script'
                      .format(stack_status))
                raise Exception('Cannot create NewRelicLogIngestion CloudFormation stack')
        else:
            print(('The "newrelic-log-ingestion" function already '
                   'exists in region {0}').format(region))

    return results


def enable_lambda_monitoring(args):
    """
    Execute the full workflow to enable AWS lambda monitoring.
    It will execute the following steps
      - create a  Cloud monitoring account if it doesn't exist yet
        - creates the required role in AWS
      - enable the integration in New Relic
      - install the Log ingestion function in AWS
    """
    nr_account_id = args['nr_account_id']
    linked_account_name = args['linked_account_name']
    role_policy = args['aws_role_policy']
    nr_region = args['nr_region']
    api_key = args['nr_api_key']
    regions = args['regions']

    results = []
    api_endpoint = get_endpoint(nr_region)
    api_client = NewRelicGraphQLClient(nr_account_id, api_key, api_endpoint)
    try:
        # GraphQL NR query
        print("Validating New Relic credentials and retrieving integration license key")
        nr_license_key = api_client.get_license_key()

        # GraphQL and AWS
        print("Checking for a preexisting link between NR and AWS, and validating the AWS CLI credentials")
        validate_linked_account(linked_account_name, api_client)

        # AWS
        try:
            print("Creating newrelic-log-ingestion Lambda function in your AWS account")
            results = setup_log_ingestion(nr_license_key, regions)
        except Exception as e:
            print(str(e))

        # AWS
        print("Creating the AWS role for the New Relic integration")
        role = create_integration_role(role_policy, nr_account_id)

        # GraphQL
        print("Linking your New Relic account to your AWS account")
        create_integration_account(
          nr_account_id, linked_account_name, role, api_client)

        # GraphQL
        print("Enabling Lambda integration on the link between New Relic and AWS")
        enable_lamba_integration(
          nr_account_id, linked_account_name, api_client)

        print("\nLambda integration is set up.\n\n"
              "Next, you'll need to instrument your Lambda functions, and use \n"
              "\t./newrelic-cloud stream-lambda-logs \\\n"
              "\t\t--functions <function_name>... \\\n"
              "\t\t--regions <aws_region>...\n\n"
              "to connect your instrumented Lambda functions to New Relic")
    except Exception as e:
        error_msg = 'Failed to set up lambda integration: {0}'.format(e)
        results.append(OperationResult(None, None, True, error_msg))
    return results


def setup_lambda_streaming(args):
    """
    Setup lambda log streaming.
    This enables lambda instrumentation logs to be sent to New Relic
    """
    function_names = args['functions']
    regions = args['regions']

    results = []
    regions = regions if regions else list_all_regions()
    for region in regions:
        for function_name in function_names:
            print(('Enabling log streaming for function : {0} '
                  'in region {1}').format(function_name, region))
            try:
                # try to find the function in the region.
                # enable streaming only if we find it
                function = get_function(function_name, region)
                if function:
                    result = create_log_subscription(region, function_name)
                    results.append(result)
                else:
                    error_msg = ('Function {0} does not exist in region {1}'
                                 ).format(function_name, region)
                    results.append(OperationResult(function_name, region, True, error_msg))
            except Exception as e:
                results.append(OperationResult(function_name, region, True, e))

    return results


def check_lambda_setup(args):
    """
    Check the status of the Lambda monitoring setup
    """
    nr_account_id = args['nr_account_id']
    linked_account_name = args['linked_account_name']
    api_key = args['nr_api_key']
    nr_region = args['nr_region']
    function_names = args['functions']
    regions = args['regions']

    api_endpoint = get_endpoint(nr_region)
    api_client = NewRelicGraphQLClient(nr_account_id, api_key, api_endpoint)

    results = []
    regions = regions if regions else list_all_regions()
    try:
        try:
            validate_linked_account(linked_account_name, api_client)
        except Exception as e:
            msg = (str(e) + '\n' + 'Refer to the following documentation link to help fix the issue: {0}'
                   ).format(_DOCS_CONFIGURE_AWS_CLI_LINK)
            results.append(OperationResult(None, None, True, msg))

        roleName = 'NewRelicLambdaIntegrationRole_{0}'.format(nr_account_id)
        role = get_role(roleName)
        if role is None:
            msg = ('The required AWS role "{0}" was not found in your configured AWS account. '
                   'Refer to the following documentation link to help fix the issue: {1}'
                   ).format(roleName, _DOCS_CONNECT_ACCOUNT_LINK)
            results.append(OperationResult(None, None, True, msg))

        for region in regions:
            function = get_function('newrelic-log-ingestion', region)
            if function is None:
                msg = ('The "newrelic-log-ingestion" Lambda function was not found in '
                       'region "{0}" of your configured AWS account. \n'
                       'Refer to the following documentation link to help fix the issue: {1}'
                       ).format(region, _DOCS_CONNECT_ACCOUNT_LINK)
                results.append(OperationResult(None, None, True, msg))

        for region in regions:
            for function_name in function_names:
                function = get_function(function_name, region)
                if function is None:
                    msg = ('The function "{0}" was not found in '
                           'region "{1}" of your configured AWS account. \n'
                           'Refer to the following documentation link to help fix the issue: {2}'
                           ).format(function_name, region, _DOCS_INSTRUMENT_LAMBDA_LINK)
                    results.append(OperationResult(None, None, True, msg))
                else:
                    streaming_filters = get_streaming_filters(region, function_name)
                    if not streaming_filters:
                        msg = ('The log streaming configuration was not found for '
                               'function {0} in region {1}. \n'
                               'Refer to the following documentation link to help fix the issue: {2}'
                               ).format(function_name, region, _DOCS_STREAM_LOGS_LINK)
                        results.append(OperationResult(None, None, True, msg))

        account = api_client.get_linked_account_by_name(linked_account_name)
        if account is None:
            msg = ('The Cloud integrations account "{0}" was '
                   'not found in the New Relic account "{1}". \n'
                   'Refer to the following documentation link to help fix the issue: {2}'
                   ).format(linked_account_name, nr_account_id, _DOCS_CONNECT_ACCOUNT_LINK)
            results.append(OperationResult(None, None, True, msg))
            # if account does not exist, return early
            return results

        is_lambda_enabled = api_client.is_integration_enabled(account['id'], 'lambda')
        if not is_lambda_enabled:
            error = ('The Lambda integration is not enabled in cloud integration '
                     'account {0} of New Relic account {1}. \n'
                     'Refer to the following documentation link to help fix the issue: {2}'
                     ).format(linked_account_name, nr_account_id, _DOCS_CONNECT_ACCOUNT_LINK)
            results.append(OperationResult(None, None, True, error))

        return results
    except Exception as e:
        print('Failed to check Lambda setup: {0}'.format(e))
        return None


def main():
    main_parser = argparse.ArgumentParser(
      usage='newrelic-cloud [-debug] command [args]',
      description='New Relic installer for AWS Lambda monitoring.')
    subparsers = main_parser.add_subparsers(dest='command')
    # compatibility with 3.6.+
    subparsers.required = True
    # lambda integration command
    lambda_parser = subparsers.add_parser(name='set-up-lambda-integration',
      usage='newrelic-cloud [-debug] set-up-lambda-integration [args]',
      help=('Link an AWS account to New Relic Cloud integrations and '
            'configure it for receiving Lambda monitoring data from agents'))

    lambda_parser.add_argument('--nr-account-id', type=int, required=True,
      help='Your New Relic account id.')
    lambda_parser.add_argument('--aws-role-policy',
      help=('(Optional) Name of the policy to assign to the AWS role. '
            'If no value is supplied, uses the AWS default ReadOnlyAccess '
            'managed policy. If a value is supplied, creates a restricted policy '
            '(only Lambda permissions.'))
    lambda_parser.add_argument('--linked-account-name', required=True,
      help=('Name of your AWS account that will appear in NR Cloud integrations. '
            'It is used to easily identify your account in NR. '
            'The cloud account will be created if it does not exist yet.'))
    lambda_parser.add_argument('--nr-api-key', required=True,
      help=('Your New Relic user API key. '
            'Check the documentation on how to obtain an API key.'))
    lambda_parser.add_argument('--nr-region', default="us", choices=('eu', 'us'),
      help=('(Optional) "eu" to use the New Relic EU region'))
    lambda_parser.add_argument('--regions', nargs='+',
      help=('(Optional) List of (space-separated) regions where the log '
            'ingestion function will be installed.'))

    # log ingestion command
    log_ingestion_parser = subparsers.add_parser(name='stream-lambda-logs',
      usage='newrelic-cloud [-debug] stream-lambda-logs [args]',
      help='Configure log streaming for instrumented Lambda functions.')
    log_ingestion_parser.add_argument('--functions', required=True, nargs='+',
      help='List of (space-separated) function names to set up log streaming.')
    log_ingestion_parser.add_argument('--regions', nargs='+',
      help=('(Optional) List of (space-separated) regions where the script will '
            'try to setup the log streaming for the given functions. '
            'If no value is supplied, it will use all available regions.'))

    # check status
    status_parser = subparsers.add_parser(name='check-lambda-setup-status',
      usage='newrelic-cloud [-debug] check-lambda-setup-status [args]',
      help=('Simple check for the current status of the Lambda setup. '
            'Checks the basics requirements to have Lambda instrumentation working.'))
    status_parser.add_argument('--nr-account-id', type=int, required=True,
      help='Your New Relic account id.')
    status_parser.add_argument('--linked-account-name', required=True,
      help='Name of your AWS account that appears in NR Cloud integrations. ')
    status_parser.add_argument('--nr-api-key', required=True,
      help=('Your New Relic user API key. '
            'Check the documentation on how to obtain an API key.'))
    status_parser.add_argument('--nr-region', default="us", choices=('eu', 'us'),
      help=('(Optional) "eu" to use the New Relic EU region'))
    status_parser.add_argument('--functions', required=True, nargs='+',
      help='List of (space-separated) function names to set up log streaming.')
    status_parser.add_argument('--regions', nargs='+',
      help=('(Optional) List of (space-separated) regions where the log '
            'ingestion should be installed.'))

    main_parser.add_argument(
      '-debug', required=False, action="store_true",
      help=('(Optional) Print debug information to file "debug.log"'))

    args = main_parser.parse_args()
    results = []
    if args.debug:
        global _DEBUG
        _DEBUG = True
    if args.command == 'set-up-lambda-integration':
        results = enable_lambda_monitoring(vars(args))
        print_summary(results)
    elif args.command == 'stream-lambda-logs':
        results = setup_lambda_streaming(vars(args))
        print_summary(results)
    elif args.command == 'check-lambda-setup-status':
        results = check_lambda_setup(vars(args))
        if results is not None:
            print_check_status(results)


if __name__ == '__main__':
    main()
